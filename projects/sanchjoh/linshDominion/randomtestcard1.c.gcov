        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <math.h>
        -:    7:#include "rngs.h"
        -:    8:
     2000:    9:int checkSmithy(struct gameState *state, int p) {
        -:   10:  struct gameState correct;
     2000:   11:  memcpy(&correct, state, sizeof(struct gameState));
        -:   12:
        -:   13:  int result;
        -:   14:
     2000:   15:  result = play_smithy(state, 0);
        -:   16:
        -:   17:
     2000:   18:  if (correct.deckCount[p] > 0) {
     2000:   19:    int counter = 0;
        -:   20:    // Simulate drawing 3 cards
    10000:   21:    while (correct.deckCount[p] > 0 && counter < 3) {
     6000:   22:      correct.deckCount[p]--;
     6000:   23:      correct.handCount[p]++;
     6000:   24:      counter++;
        -:   25:    }
        -:   26:    // Simulate discarding a card from hand
     2000:   27:    correct.handCount[p]--;
     2000:   28:    correct.discardCount[p]++;
        -:   29:  }
        -:   30:
     2000:   31:  if (correct.deckCount[p] < state->deckCount[p]){
        -:   32:    // printf("TEST1 FAILED\n");
    #####:   33:    return 0;
        -:   34:  }
     2000:   35:  if (correct.discardCount[p] > state->discardCount[p]) {
        -:   36:    // printf("TEST2 FAILED\n");
     2000:   37:    return 0;
        -:   38:  }
    #####:   39:  if (correct.handCount[p] > state->handCount[p]) {
        -:   40:    // printf("TEST3 FAILED\n");
    #####:   41:    return 0;
        -:   42:  }
        -:   43:
    #####:   44:  return 1;
        -:   45:}
        -:   46:
        1:   47:int main() {
        -:   48:  int p, n, i, result;
        -:   49:  struct gameState G;
        -:   50:
        1:   51:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   52:	       remodel, smithy, village, baron, great_hall};
        -:   53:
        -:   54:  // Initiate ramdomizer
        1:   55:  SelectStream(2);
        1:   56:  PutSeed(3);
        -:   57:
     2001:   58:  for (n = 0; n < 2000; n++) {
        -:   59:
        -:   60:    // Fill game post with random stuff.
 52602000:   61:    for (i = 0; i < sizeof(struct gameState); i++) {
 52600000:   62:      ((char*)&G)[i] = floor(Random() * 256);
        -:   63:    }
        -:   64:
        -:   65:    // Fill game post with credible/in-range values
        -:   66:    // Since the Adventurer card relies on the ability to draw cards, we need
        -:   67:    // These values to stay within the allowabled ranges to accurately test.
     2000:   68:    p = floor(Random() * 2);
     2000:   69:    initializeGame(2, k, 1, &G);
     2000:   70:    G.deckCount[p] = floor(Random() * MAX_DECK);
     2000:   71:    G.discardCount[p] = floor(Random() * MAX_DECK);
     2000:   72:    G.handCount[p] = floor(Random() * MAX_HAND);
     2000:   73:    result = checkSmithy(&G, p);
        -:   74:
     2000:   75:    if (result == 0) {
     2000:   76:    printf("SMITHY FAILED\n");
        -:   77:  } else {
    #####:   78:    printf("SMITHY PASSED\n");
        -:   79:  }
        -:   80:  }
        -:   81:
        -:   82:
        -:   83:}
